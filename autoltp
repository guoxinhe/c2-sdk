#!/bin/sh

nfsroot=/local/hguo/nfsroot
ltpstatus=$nfsroot/autoltp/ltpstatus

ltp_datestart=100101
ltp_timestart=120000
ltp_datedone=100101
ltp_timedone=130000
ltp_tidstart=0
ltp_tiddone=0
ltp_lastchecktid=0
ltp_maxduration=300000
ltp_kernelversion=2.6.23
ltp_kernelbuild=100101
ltp_kernelarch=jazz2
ltp_kernelpackage=
ltp_gccversion=4.0.3
ltp_gccbuild=100101
ltp_clientname=c2
ltp_hostname=`hostname`
ltp_hostip=$(/sbin/ifconfig eth0|sed -n 's/.*inet addr:\([^ ]*\).*/\1/p')
ltp_runsh=/local/c2/ltp-run.sh
ltp_testcmd=runltplite.sh
ltp_kernel=$nfsroot/boot/vmlinux.bin
ltp_release=$nfsroot/ltprelease
ltp_result=$nfsroot/ltpresult
ltp_clientip=$nfsroot/ltpresult/clientip
ltp_doneflag=$nfsroot/ltpresult/done
ltp_nrtested=0
ltp_status=null

update_ltpstatus_profile()
{
cat <<ENDOFOUT >$ltpstatus
#!/bin/sh
# auto created file, do not edit
# last update on `date`, by $USER, on `hostname`
ltp_datestart=$ltp_datestart
ltp_timestart=$ltp_timestart
ltp_datedone=$ltp_datedone
ltp_timedone=$ltp_timedone
ltp_tidstart=$ltp_tidstart
ltp_tiddone=$ltp_tiddone
ltp_lastchecktid=$ltp_lastchecktid
ltp_maxduration=$ltp_maxduration
ltp_kernelversion=$ltp_kernelversion
ltp_kernelbuild=$ltp_kernelbuild
ltp_kernelarch=$ltp_kernelarch
ltp_kernelpackage=$ltp_kernelpackage
ltp_gccversion=$ltp_gccversion
ltp_gccbuild=$ltp_gccbuild
ltp_clientname=$ltp_clientname
ltp_hostname=$ltp_hostname
ltp_hostip=$ltp_hostip
ltp_runsh=$ltp_runsh
ltp_testcmd=$ltp_testcmd
ltp_kernel=$ltp_kernel
ltp_release=$ltp_release
ltp_result=$ltp_result
ltp_clientip=$ltp_clientip
ltp_doneflag=$ltp_doneflag
ltp_nrtested=$((ltp_nrtested+1))
ltp_status=$ltp_status
ENDOFOUT
}

if [ -f $ltpstatus ]; then
    . $ltpstatus
else
    mkdir -p ${ltpstatus%/*}
    touch $ltpstatus
fi

[ -z "$MISSION" ] && export MISSION=${0##*/}
[ -z "$rlog" ] && export rlog=$HOME/rlog/rlog.$MISSION
recho()
{
    #progress echo, for debug during run as the crontab task.
    if [ ! -z "$rlog" ] ; then
    echo -en `date +"%Y-%m-%d %H:%M:%S"` " " >>$rlog.log.txt
    echo "$@" >>$rlog.log.txt
    fi
    echo "$@"
}
recho_duration()
{
    tm_b=`date +%s`
    tm_c=$((tm_b-$1))
    tm_h=$((tm_c/3600))
    tm_m=$((tm_c/60))
    tm_m=$((tm_m%60))
    tm_s=$((tm_c%60))
    tm_d=$((tm_h/24))
    [ $tm_d -gt 0 ] && tm_h=$((tm_h%24))
    shift
    recho "$@" "$tm_c seconds / $tm_d(days) $tm_h:$tm_m:$tm_s consumed."
}
addto_send()
{
    while [ $# -gt 0 ] ; do
        if [ "$SENDTO" = "" ]; then
            SENDTO=$1 ;
        else
          r=`echo $SENDTO | grep $1`
          if [ "$r" = "" ]; then
            SENDTO=$SENDTO,$1 ;
          fi
        fi
        shift
    done
    export SENDTO
}
addto_cc()
{
    while [ $# -gt 0 ] ; do
        if [ "$CCTO" = "" ]; then
            CCTO=$1 ;
        else
          r=`echo $CCTO | grep $1`
          if [ "$r" = "" ]; then
            CCTO=$CCTO,$1 ;
          fi
        fi
        shift
    done
    export CCTO
}
send_email_report()
{
    addto_send hguo@c2micro.com mingliu@c2micro.com

    mail_title="$ltp_kernelarch Kernel-$ltp_kernelversion build $ltp_kernelbuild ltp test report"
    (
        echo "$mail_title"
        echo "This email is created by kernel ltp auto test crontab item, see below"
	cat $ltpstatus
        echo "" 
        echo "Report from file: $ltp_result/resultlog.$ltp_kernelbuild"
        if [ -f $ltp_result/resultlog.$ltp_kernelbuild ]; then
            cat $ltp_result/resultlog.$ltp_kernelbuild
        else
            echo "Error: Result file $ltp_result/resultlog.$ltp_kernelbuild lost"
        fi
        echo "Regards,"
        echo "$USER@`hostname`.c2micro.com"
    ) 2>&1 | mail -s"$mail_title" $SENDTO
}
ltp_check_running()
{
    nowdate=$(date +%y%m%d)
    nowtime=$(date +%H%M%S)
    nowtid=$(date +%s)
    done=0

    [ $CONFIG_DEBUG ] && (
    recho ltp_check_running
    recho ltp_datestart=$ltp_datestart , now $nowdate
    recho ltp_timestart=$ltp_timestart , now $nowtime )

    duration=$((nowtid-ltp_tidstart))

    if [ $duration -gt $ltp_maxduration ];then
        recho_duration $ltp_tidstart "Building $ltp_kernelbuild run too long time, should stop "
        done=1
    fi
    if [ -f $ltp_doneflag ]; then
        recho_duration $ltp_tidstart "Building $ltp_kernelbuild run finished "
        done=1
    fi
    if [ $done -eq 1 ];then
        ltp_status=done
        ltp_datedone=$nowdate
        ltp_timedone=$nowtime
        ltp_tiddone=$(date +%s)
        update_ltpstatus_profile
        send_email_report
        return 0
    fi
    recho_duration $ltp_tidstart "Building $ltp_kernelbuild is runnging "
}
ltp_check_newkernel()
{
    path=/sdk/jazz2/dev/weekly
    new_kernelbuild=000000
    allv=`ls /sdk/jazz2/dev/weekly`

    for i in $allv ;do
        [ $i -gt $new_kernelbuild ] && new_kernelbuild=$i
    done
    [ $CONFIG_DEBUG ] && recho find new kernel version is: $new_kernelbuild
}
ltp_load_newkernel()
{
    kernelnand=/sdk/jazz2/dev/weekly/$ltp_kernelbuild/c2-jazz2-sdk-$ltp_kernelbuild-kernel-nand-bin.tar.gz
    if [ ! -f $kernelnand ]; then
        recho "Can not find kernel $kernelnand, exit"
        exit 0
    fi
    mkdir -p $nfsroot/boot
    rm -rf $nfsroot/boot/*
    tar xzf $kernelnand -C $nfsroot/boot
    ln -s $kernelnand $nfsroot/boot/kernel-nand-bin.tar.gz
    ln -s sw/kernel/rootfs.image $nfsroot/boot/rootfs.image
    ln -s sw/kernel/linux-2.6/zvmlinux.bin $nfsroot/boot/zvmlinux.bin
    ln -s ../../logo.bmp $nfsroot/boot/logo.bmp
    recho "ls -l $nfsroot/boot"
    ls -l $nfsroot/boot
    ltp_kernelpackage=$kernelnand
}
jtag_reset_board()
{
    if [ $UID -eq 0 ]; then
        echo "c2 chip_reset" | jtag
    else
        recho "This feature need root uid"
    fi
}
ltp_check()
{
    recho "$ltp_kernelarch Kernel-$ltp_kernelversion build $ltp_kernelbuild ltp test report"
    recho "Status : $ltp_status"
    recho_duration $ltp_tidstart "From last running:"
    recho_duration $ltp_tiddone  "From last stop:   "
    recho "Target board's IP is: `cat $ltp_clientip`"
    recho "Target board's result folder is: $ltp_result"
    cat $ltpstatus
}
start_new_ltp_mission()
{
            ltp_kernelbuild=$new_kernelbuild
            ltp_status=running
            ltp_datestart=$(date +%y%m%d)
            ltp_timestart=$(date +%H%M%S)
            ltp_tidstart=$(date +%s)
            ltp_load_newkernel
            update_ltpstatus_profile
            jtag_reset_board
}
this_help()
{
cat <<TEXTEND
    Usage $0  [ --debug ] [ --help ]
    config file now is hard coded.
    example $0 
TEXTEND
}

while [ $# -gt 0 ] ; do
    case $1 in
    --help|-h|\?|-\?)  this_help; shift; exit 0;;
    --check)  ltp_check; shift; exit 0;;
    --reset | --restart | --start)  jtag_reset_board;shift; exit 0;;
    --debug) CONFIG_DEBUG=y; shift;;
    *) break;
    esac
done

[ $CONFIG_DEBUG ] && ltp_maxduration=60
[ $CONFIG_DEBUG ] && (
recho nfsroot=$nfsroot
recho ltpstatus=$ltpstatus
)

nowtid=$(date +%s)
if [ $((nowtid-ltp_lastchecktid)) -lt 60 ]; then
    recho_duration $ltp_lastchecktid  "Just now checked "
    exit 0
fi
ltp_lastchecktid=$(date +%s)
case $ltp_status in
    running)
        ltp_check_running
        ;;
    null | none | done ) 
        ltp_check_newkernel
        if [ $ltp_kernelbuild -lt $new_kernelbuild ];then
            recho Find a new kernel build $new_kernelbuild, start it
            start_new_ltp_mission
        else 
            if [ -f $ltp_result/resultlog.$ltp_kernelbuild ]; then
                recho "Last build $ltp_kernelbuild already tested."
                recho "Get the last test report from $ltp_result/resultlog.$ltp_kernelbuild"
            else
                recho "Can not find result report file \"$ltp_result/resultlog.$ltp_kernelbuild\", restart test"
                start_new_ltp_mission
            fi
        fi
        ;;
    *) recho "unknown status";;  
esac

