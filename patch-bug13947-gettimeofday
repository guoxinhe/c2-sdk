Index: linux-2.6/arch/c2/kernel/time.c
===================================================================
--- linux-2.6.orig/arch/c2/kernel/time.c
+++ linux-2.6/arch/c2/kernel/time.c
@@ -323,6 +323,8 @@ unsigned long (*do_gettimeoffset)(void) 
 
 static long last_rtc_update;
 
+unsigned long last_rtc_counter=0;
+unsigned long last_rtc_1scounter=0;
 /*
  * High-level timer interrupt service routines.  This function
  * is set as irqaction->handler and is invoked through do_IRQ.
@@ -331,6 +333,7 @@ irqreturn_t timer_interrupt(int irq, voi
 {
 	write_seqlock(&xtime_lock);
 
+	last_rtc_counter=C2_READ(C2_LB_SYS_TMR_CMP_D_ADDR);//still not be updated, otherwise use C2_LB_SYS_TMR_D_ADDR
 	//mips_timer_ack();
 
 	/*
@@ -338,6 +341,8 @@ irqreturn_t timer_interrupt(int irq, voi
 	 */
 	do_timer(1);
 
+	if((xtime.tv_nsec / 1000) <  ((unsigned) TICK_SIZE)) //update every a new second
+		last_rtc_1scounter=last_rtc_counter;
 	/*
 	 * If we have an externally synchronized Linux clock, then update
 	 * CMOS clock accordingly every ~11 minutes. rtc_c2_set_time() has to be
Index: linux-2.6/kernel/time/timekeeping.c
===================================================================
--- linux-2.6.orig/kernel/time/timekeeping.c
+++ linux-2.6/kernel/time/timekeeping.c
@@ -19,6 +19,7 @@
 #include <linux/time.h>
 #include <linux/tick.h>
 
+#include <asm/c2timer.h>
 
 /*
  * This read-write spinlock protects us from races in SMP while
@@ -87,7 +88,32 @@ static inline s64 __get_nsec_offset(void
 
 	/* convert to nanoseconds: */
 	ns_offset = cyc2ns(clock, cycle_delta);
+	return ns_offset;
+}
+static inline s64 __get_nsec_offset_c2reg(void)
+{
+	//cycle_t cycle_now;
+	unsigned long cycle_delta;
+	s64 ns_offset;
 
+	//patch
+	{//temp solution for fix bug #13947, should be removed after complete implement of hrtimer.
+	//xtime->tv_nsec is updated every HZ in unit HZ, so the lsb are all zero.
+	//calculate the clocks from last HZ irq, then convert to nsec and pad to it.
+	//#define C2TIMDVAL2US(rv)  ((rv)*HZ*100/(SYS_CLK_DIV16_TIMER_COMPARE_VAL/10))
+	#define C2TIMDVAL2US(rv)  ((rv)*100/325)
+	extern unsigned long last_rtc_counter;
+	unsigned long cycle_nowb=C2_READ(C2_LB_SYS_TMR_D_ADDR);
+	unsigned long nr_usec;
+	if(cycle_nowb>=last_rtc_counter) {
+		cycle_delta = cycle_nowb - last_rtc_counter;
+	} else {
+		cycle_delta = cycle_nowb+((0xFFFFFFFFUL-last_rtc_counter)/SYS_CLK_DIV16_TIMER_COMPARE_VAL)*SYS_CLK_DIV16_TIMER_COMPARE_VAL;
+	}
+	while(cycle_delta >= 32500) cycle_delta -= 32500;
+	nr_usec = C2TIMDVAL2US((unsigned long)cycle_delta);
+	ns_offset = ((nr_usec * 1000));
+	}
 	return ns_offset;
 }
 
@@ -113,6 +139,22 @@ static inline void __get_realtime_clock_
 
 	timespec_add_ns(ts, nsecs);
 }
+static inline void __get_realtime_clock_ts_c2reg(struct timespec *ts)
+{
+	unsigned long seq;
+	s64 nsecs;
+
+	do {
+		seq = read_seqbegin(&xtime_lock);
+
+		*ts = xtime;
+		nsecs = __get_nsec_offset_c2reg();
+
+	} while (read_seqretry(&xtime_lock, seq));
+        if(nsecs>9999999) nsecs=9999999;
+	ts->tv_nsec=(ts->tv_nsec/10000000)*10000000 + nsecs;
+	//timespec_add_ns(ts, nsecs);
+}
 
 /**
  * getnstimeofday - Returns the time of day in a timespec
@@ -137,7 +179,8 @@ void do_gettimeofday(struct timeval *tv)
 {
 	struct timespec now;
 
-	__get_realtime_clock_ts(&now);
+	//__get_realtime_clock_ts(&now);
+	__get_realtime_clock_ts_c2reg(&now);
 	tv->tv_sec = now.tv_sec;
 	tv->tv_usec = now.tv_nsec/1000;
 }
