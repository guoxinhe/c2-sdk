#!/bin/sh
##  cron debug message code, these setting does not pass to Makefile
#----------------------------------------------------------------------
#export MISSION=`echo $0 | sed 's:.*/\(.*\):\1:'`
export MISSION=${0##*/}
export rlog=$HOME/rlog/rlog.$MISSION
mkdir -p $HOME/rlog
recho()
{
    #progress echo, for debug during run as the crontab task.
    if [ ! -z "$rlog" ] ; then
    echo `date +"%Y-%m-%d %H:%M:%S"` " $@" >>$rlog.log.txt
    fi
    echo `date +"%Y-%m-%d %H:%M:%S"` " $@"
}
recho_time_consumed()
{
    tm_b=`date +%s`
    tm_c=$(($tm_b-$1))
    tm_h=$(($tm_c/3600))
    tm_m=$(($tm_c/60))
    tm_m=$(($tm_m%60))
    tm_s=$(($tm_c%60))
    shift
    recho "$@" "$tm_c seconds / $tm_h:$tm_m:$tm_s consumed."
}

generate_repo_sync_email()
{
    linesnew=`sed -n '$=' $rlog.log.txt`
    if [ $? -gt 0 ]; then 
    linesnew=0
    fi
    echo "============================= mail body start ============================="
    if [ $linesnew -gt $lines ];then
    tail -$((linesnew-lines)) $rlog.log.txt
    fi
    echo "============================= mail  body  end ============================="
}
generate_email_header()
{
	[ $refname      ] || refname=refname     
	[ $refname_type ] || refname_type=refname_type
	[ $oldrev       ] || oldrev=oldrev      
	[ $newrev       ] || newrev=newrev      
	# --- Email (all stdout will be the email)
	# Generate header
	cat <<-EOF
	To: $recipients
	Subject: repo sync check report on ssh://gituser@git.bj.c2micro.com/mentor-minor/build
	Content-Type: text/plain; charset=utf-8
	X-Git-Refname: $refname
	X-Git-Reftype: $refname_type
	X-Git-Oldrev: $oldrev
	X-Git-Newrev: $newrev

	This is an automated email from git.bj.c2micro.com:/home-localuser/gituser/bin/rp-whatsnew
	Please don't reply
	EOF
}
generate_email_footer()
{
	SPACE=" "
	cat <<-EOF

	Regards,
	Git Server User
	git.bj.c2micro.com 10.16.13.31
	EOF
}
generate_email()
{
	recipients=hguo@c2micro.com
	if [ $nrupdate -gt 0 ];then
		recipients=$recipients,android_repo@c2micro.com
	fi
	
	generate_email_header

	generate_repo_sync_email

	generate_email_footer
}
send_mail()
{
	#call method: generate_email $oldrev $newrev $refname | send_mail
	if [ -n "$envelopesender" ]; then
		/usr/sbin/sendmail -t -f "$envelopesender"
	else
		/usr/sbin/sendmail -t
	fi
}
repodir=/mentor-mirror/build
tmpfile=/tmp/rp-whatsnew-$$
nrupdate=0
tm_a=`date +%s`
lines=`sed -n '$=' $rlog.log.txt`
if [ $? -gt 0 ]; then 
    lines=0
fi
recho "Start repo sync on $repodir
    This will do 'repo sync', then foreach git do git log check,
    find the updated modules for repo rebase
    updated modules are listed, need do 'repo rebase' manually."

recho "Checking repositories $repodir ..."
cd $repodir
recho "repo sync"
repo sync  | tee $tmpfile
rsize=$(stat -c%s $tmpfile)
if [ $rsize -le 2 ]; then
    echo "    nothing new found" | tee $tmpfile
else
    nrupdate=$((nrupdate+1))
fi
cat $tmpfile >>$rlog.log.txt

recho "Wha's new for all modules..." 
repo forall -p -c "git log --oneline --exit-code c2micro-froyo --not devel"  | tee $tmpfile
rsize=$(stat -c%s $tmpfile)
if [ $rsize -le 2 ]; then
    echo "    nothing new found" | tee $tmpfile
else
    nrupdate=$((nrupdate+1))
fi
cat $tmpfile >>$rlog.log.txt

cd kernel.git
recho "Wha's new for kernel..."
git log --oneline --exit-code master --not devel  | tee $tmpfile
rsize=$(stat -c%s $tmpfile)
if [ $rsize -le 2 ]; then
    echo "    nothing new found" | tee $tmpfile
else
    nrupdate=$((nrupdate+1))
fi
cat $tmpfile >>$rlog.log.txt

if [ $nrupdate -gt 0 ];then
    echo "" >>$rlog.log.txt
    echo "    Merge suggestion: manually merge manybe need."  >>$rlog.log.txt
    echo "" >>$rlog.log.txt
fi

recho_time_consumed $tm_a "$repodir repo sync task done"
echo "" >>$rlog.log.txt

generate_email | send_mail
