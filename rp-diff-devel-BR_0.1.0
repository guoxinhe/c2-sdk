#!/bin/sh
##  cron debug message code, these setting does not pass to Makefile
#----------------------------------------------------------------------
#export MISSION=`echo $0 | sed 's:.*/\(.*\):\1:'`
export PATH=$PATH:$HOME/bin
export MISSION=${0##*/}
export rlog=$HOME/rlog/rlog.$MISSION
mkdir -p $HOME/rlog
recho()
{
    #progress echo, for debug during run as the crontab task.
    if [ ! -z "$rlog" ] ; then
    echo `date +"%Y-%m-%d %H:%M:%S"` " $@" >>$rlog.log.txt
    fi
    echo `date +"%Y-%m-%d %H:%M:%S"` " $@"
}
recho_time_consumed()
{
    tm_b=`date +%s`
    tm_c=$(($tm_b-$1))
    tm_h=$(($tm_c/3600))
    tm_m=$(($tm_c/60))
    tm_m=$(($tm_m%60))
    tm_s=$(($tm_c%60))
    shift
    recho "$@" "$tm_c seconds / $tm_h:$tm_m:$tm_s consumed."
}

generate_repo_sync_email()
{
    linesnew=`sed -n '$=' $rlog.log.txt`
    if [ $? -gt 0 ]; then 
    linesnew=0
    fi
    echo "============================= mail body start ============================="
    if [ $linesnew -gt $lines ];then
    tail -$((linesnew-lines)) $rlog.log.txt
    fi
    echo "============================= mail  body  end ============================="
}
generate_email_header()
{
	[ $refname      ] || refname=refname     
	[ $refname_type ] || refname_type=refname_type
	[ $oldrev       ] || oldrev=oldrev      
	[ $newrev       ] || newrev=newrev      
	# --- Email (all stdout will be the email)
	# Generate header
	cat <<-EOF
	To: $recipients
	Subject: repo sync check report $nrupdate issues
	Content-Type: text/plain; charset=utf-8
	X-Git-Refname: $refname
	X-Git-Reftype: $refname_type
	X-Git-Oldrev: $oldrev
	X-Git-Newrev: $newrev

	This is an automated email from git.bj.c2micro.com:/home-localuser/gituser/bin/rp-whatsnew
	Please don't reply
	EOF
}
generate_email_footer()
{
	SPACE=" "
	cat <<-EOF

	Regards,
	Git Server User
	git.bj.c2micro.com 10.16.13.31
	repo on ssh://gituser@git.bj.c2micro.com/mentor-mirror/build
	EOF
}
generate_email()
{
	recipients=hguo@c2micro.com
	if [ $nrupdate -gt 0 ];then
		recipients=$recipients,android_repo@c2micro.com
	fi
	
	generate_email_header

	generate_repo_sync_email

	generate_email_footer
}
send_mail()
{
	#call method: generate_email $oldrev $newrev $refname | send_mail
	if [ -n "$envelopesender" ]; then
		/usr/sbin/sendmail -t -f "$envelopesender"
	else
		/usr/sbin/sendmail -t
	fi
}
this_help()
{
cat <<TEXTEND
    Usage $0  [ --crontab ]
    Do repo sync and check whether need  merge
    example $0 --crontab
TEXTEND
}
while [ $# -gt 0 ] ; do
    case $1 in
    --help|-h|\?|-\?)  this_help; shift; exit 0;;
    --crontab) CONFIG_CRONTAB=y; shift;;
    *) break;
    esac
done

repodir=/mentor-mirror/build
tmpfile=/tmp/${0##*/}-$$
nrupdate=0
tm_a=`date +%s`
lines=`sed -n '$=' $rlog.log.txt`
if [ $? -gt 0 ]; then 
    lines=0
fi

recho "Checking repositories $repodir ..."
cd $repodir

b1=devel
b2=BR_0.1.0
branch_diff()
{
echo ""
recho ""
recho "Wha's in $1 but not in $2" 
recho "---------------------------------------"
repo forall -p -c "git log --oneline --exit-code $1 --not $2"  | tee $tmpfile
rsize=$(stat -c%s $tmpfile)
if [ $rsize -le 2 ]; then
    echo "    nothing new found" | tee $tmpfile
else
    nrupdate=$((nrupdate+1))
fi
cat $tmpfile >>$rlog.log.txt
}

branch_diff $b1 $b2
branch_diff $b2 $b1

if [ $nrupdate -gt 0 ];then
    echo "" >>$rlog.log.txt
    echo "    Merge suggestion: manually merge manybe need."  >>$rlog.log.txt
    echo "" >>$rlog.log.txt
fi

recho_time_consumed $tm_a "$repodir repo sync task done"
echo "" >>$rlog.log.txt

if [ $nrupdate -gt 0 ] ;then
    if [ -t 1 -o -t 2 ];then
    generate_email
    else
    generate_email | send_mail
    fi
fi
